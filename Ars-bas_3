import requests
import time

# Токен вашего бота (полученный у BotFather)
TOKEN = "7546021744:AAGVbEDe103wHvvLszrksQKbFwIzHv9K0mQ"
URL = f"https://api.telegram.org/bot{TOKEN}/"
# Ваш API-ключ от WeatherMap
WEATHER_API_KEY = "ee579d8d1c284f90abe201130241810"

# Словарь для хранения состояния пользователей
user_states = {}

# Вопросы и ответы для теста
questions = [
    {
        "question": "Какой документ регулирует правила использования беспилотных летательных аппаратов в воздушном пространстве России?",
        "answers": ["Федеральный закон 'О безопасности полетов'", "Воздушный кодекс Российской Федерации",
                    "Указ Президента РФ", "Транспортный кодекс Российской Федерации"],
        "correct": 1
    },
    {
        "question": "Какой максимальный вес разрешен для БПЛА, чтобы его использование не требовало отдельной регистрации?",
        "answers": ["30 кг", "250 г", "1 кг", "150 г"],
        "correct": 1
    },
    {
        "question": "На какой минимальной высоте можно использовать БПЛА без специального разрешения?",
        "answers": ["100 метров", "150 метров", "120 метров", "50 метров"],
        "correct": 3
    },
    {
        "question": "Кому предоставлено право устанавливать ограничения и запреты на использование БПЛА в отдельных районах?",
        "answers": ["Министерству транспорта РФ", "Федеральному агентству воздушного транспорта (Росавиация)",
                    "МВД России", "Органам местного самоуправления"],
        "correct": 1
    },
    {
        "question": "Какая информация должна быть указана на БПЛА весом более 250 г?",
        "answers": ["ФИО владельца", "Номер телефона владельца", "Регистрационный номер и контактные данные оператора",
                    "Серийный номер устройства"],
        "correct": 2
    },
    {
        "question": "Что обязан сделать оператор БПЛА перед его использованием в пределах населенного пункта?",
        "answers": ["Получить разрешение у местных властей", "Сообщить в Росавиацию",
                    "Получить разрешение на использование воздушного пространства",
                    "Подать уведомление в Министерство обороны"],
        "correct": 2
    },
    {
        "question": "Каким образом в РФ ограничивается использование БПЛА вблизи стратегических объектов?",
        "answers": ["Установлены запретные зоны в воздушном пространстве",
                    "Разрешено только при наличии удостоверения оператора",
                    "Запрещено только во время проведения спецопераций", "Ограничений нет"],
        "correct": 0
    },
    {
        "question": "В каком случае полет БПЛА может быть прерван или запрещен даже при наличии разрешения?",
        "answers": ["При ухудшении погодных условий", "Если БПЛА потерял связь с оператором",
                    "При нарушении правил безопасности других участников воздушного движения", "Все вышеперечисленное"],
        "correct": 3
    },
    {
        "question": "С какого возраста в РФ разрешено управление БПЛА весом свыше 250 грамм?",
        "answers": ["С 12 лет", "С 16 лет", "С 18 лет", "С 21 года"],
        "correct": 2
    },
    {
        "question": "Какое максимальное расстояние разрешено для полета БПЛА в пределах видимости оператора?",
        "answers": ["500 метров", "1000 метров", "1500 метров", "2000 метров"],
        "correct": 0
    },
    {
        "question": "Какой орган осуществляет надзор за использованием воздушного пространства в Российской Федерации?",
        "answers": ["Минтранс РФ", "ФСБ РФ", "Росавиация", "Росгвардия"],
        "correct": 2
    },
    {
        "question": "Какое разрешение необходимо для ночного полета БПЛА?",
        "answers": ["От органов местного самоуправления", "От МВД РФ", "От Росавиации",
                    "Никакого, если есть огни на БПЛА"],
        "correct": 2
    },
    {
        "question": "С какой скоростью максимально можно летать на БПЛА без специального разрешения?",
        "answers": ["50 км/ч", "60 км/ч", "30 км/ч", "100 км/ч"],
        "correct": 0
    },
    {
        "question": "Какое минимальное расстояние должно быть между БПЛА и другими воздушными судами?",
        "answers": ["100 метров", "300 метров", "500 метров", "1000 метров"],
        "correct": 2
    },
    {
        "question": "Что требуется для коммерческого использования БПЛА в России?",
        "answers": ["Регистрация в налоговой инспекции", "Лицензия оператора БПЛА", "Разрешение Росавиации",
                    "Заявка в МВД РФ"],
        "correct": 1
    },
    {
        "question": "Можно ли управлять БПЛА вблизи аэропортов?",
        "answers": ["Да, с разрешением Росавиации", "Нет, это запрещено", "Только в специальных зонах",
                    "Да, но не ближе 1 км"],
        "correct": 1
    },
    {
        "question": "Какое ограничение по времени полета БПЛА установлено для неспециалистов?",
        "answers": ["20 минут", "30 минут", "1 час", "Нет ограничения"],
        "correct": 1
    },
    {
        "question": "Кто несет ответственность за ущерб, причиненный БПЛА?",
        "answers": ["Производитель", "Оператор БПЛА", "Росавиация", "Страховая компания"],
        "correct": 1
    },
    {
        "question": "Может ли БПЛА использоваться для перевозки коммерческих грузов без разрешения?",
        "answers": ["Да", "Нет", "Только с согласия Росгвардии", "Только если это личный груз"],
        "correct": 1
    },
    {
        "question": "Какой орган отвечает за расследование происшествий с участием БПЛА?",
        "answers": ["МВД РФ", "Росавиация", "МЧС РФ", "Росгвардия"],
        "correct": 1
    },
    {
        "question": "Требуется ли разрешение для полета БПЛА над собранием людей?",
        "answers": ["Да, обязательно", "Нет, если высота не превышает 50 метров", "Нет ограничений",
                    "Да, только если более 100 человек"],
        "correct": 0
    },
    {
        "question": "Какое минимальное расстояние от дорог общего пользования должен соблюдать оператор БПЛА?",
        "answers": ["50 метров", "100 метров", "150 метров", "Нет ограничений"],
        "correct": 1
    },
    {
        "question": "Кто обязан следить за безопасностью полетов БПЛА?",
        "answers": ["Оператор БПЛА", "Росгвардия", "Минтранс РФ", "МЧС РФ"],
        "correct": 0
    },
    {
        "question": "Какой минимальный вес БПЛА, подлежащий регистрации в Росавиации?",
        "answers": ["150 грамм", "250 грамм", "500 грамм", "1 кг"],
        "correct": 1
    },
    {
        "question": "Что должен сделать оператор при потере БПЛА из зоны видимости?",
        "answers": ["Сообщить в полицию", "Немедленно прекратить полет", "Продолжить полет с визуальной помощью",
                    "Сообщить в Росавиацию"],
        "correct": 1
    },
    {
        "question": "Можно ли передавать управление БПЛА другому лицу во время полета?",
        "answers": ["Да, без ограничений", "Нет", "Да, с разрешением", "Только с квалификацией"],
        "correct": 1
    },
    {
        "question": "На какую минимальную высоту необходимо поднять БПЛА перед переходом в ручной режим?",
        "answers": ["10 метров", "20 метров", "50 метров", "100 метров"],
        "correct": 1
    },
    {
        "question": "Какую информацию должен предоставить оператор при запросе органов надзора?",
        "answers": ["Маршрут полета", "Контактные данные", "Паспорт оператора и разрешение", "Все перечисленное"],
        "correct": 3
    },
    {
        "question": "Можно ли использовать БПЛА для съемки частной собственности без разрешения?",
        "answers": ["Да", "Нет", "Только для госорганов", "Только для личного пользования"],
        "correct": 1
    },
    {
        "question": "Какая максимальная высота полета разрешена для неспециалистов?",
        "answers": ["100 метров", "150 метров", "120 метров", "200 метров"],
        "correct": 1
    }
]

# Темы этапов подготовки к аэрофотосъемке
preparation_topics = [
    "Планирование маршрута",
    "Подготовка оборудования",
    "Оценка местности",
    "Настройка параметров съемки",
    "Запуск дрона",
    "Постобработка данных"
]

# Описание каждого этапа подготовки
preparation_descriptions = {
    "Планирование маршрута": "1. Планирование маршрута полета включает в себя выбор точки взлета, контрольные точки и маршруты возврата.",
    "Подготовка оборудования": "2. Подготовка оборудования: проверка дрона, батарей, камеры, системы навигации.",
    "Оценка местности": "3. Оценка местности включает проверку погодных условий, рельефа и возможных помех для сигнала GPS.",
    "Настройка параметров съемки": "4. Настройка параметров съемки: выбор разрешения, фокусировки и настройки камеры.",
    "Запуск дрона": "5. Запуск дрона: убедитесь, что оборудование работает правильно, и начните съемку по плану.",
    "Постобработка данных": "6. Постобработка данных: извлечение изображений, коррекция и анализ данных после съемки."
}

# Нормативная документация
documentation_rules = [
    "ГОСТы",
    "Структура воздушного пространства",
    "Запрещение или ограничение ИВП",
    "Использование ВП",
    "Зоны полетов"
]

# Описание нормативной документации
documentation_descriptions = {
    "ГОСТы": "[ГОСТ Р 59328-2021](https://download.geoscan.aero/site-files/documents/ГОСТ%20Р%2059328-2021%20Аэрофотосъемка%20топографическая.%20Технические%20требования.pdf?v1) Аэрофотосъемка топографическая. Технические требования – описывает требования к планированию и производству аэрофотосъемки."'\n'
             "[ГОСТ Р 59562-2021](https://download.geoscan.aero/site-files/documents/ГОСТ%20Р%2059562-2021%20Съемка%20аэрофототопографическая.%20Технические%20требования.pdf) Съемка аэрофототопографическая. Технические требования – описывает требования к планированию производству аэрофотосъемки как часть комплекса работ, включающего в себя АФС, создание ЦОФП и цифровых топографических карт."'\n'
             "ГОСТ Р 70318-2022 Инфраструктура пространственных данных. Единая электронная картографическая основа. Общие требования – требования к составу и качеству данных, используемых для создания и обновления единой электронной картографической основы"'\n',
    "Структура воздушного пространства": "а) зоны и районы (зоны и районы Единой системы, районы полетной информации, диспетчерские районы, диспетчерские зоны);"'\n'
                                          "б) маршруты обслуживания воздушного движения;"'\n'
    "в) районы аэродромов (аэроузлов, вертодромов)"'\n'
"г) специальные зоны (зоны отработки техники пилотирования и др.);"'\n'
"д) маршруты полетов воздушных судов;"'\n'
"е) запретные зоны;"'\n'
"ж) опасные зоны;"'\n'
"з) зоны ограничения полетов;"'\n'
"и) другие элементы, устанавливаемые для осуществления деятельности в воздушном пространстве."'\n',
    "Запрещение или ограничение ИВП": "*Местный режим* - это запрещение или ограничение использования воздушного пространства в нижнем воздушном пространстве классов C и G, исключая воздушное пространство воздушных трасс и местных воздушных линий, открытых для международных полетов, а также районов аэродромов, открытых для выполнения международных полетов."'\n'
    "*Временный режим* - это запрещение или ограничение использования воздушного пространства в воздушном пространстве классов A и C.",



    "Использование ВП": "[Воздушный кодекс Российской Федерации](http://pravo.gov.ru/proxy/ips/?docbody=&nd=102046246)"'\n'
           "[Постановление Правительства РФ от 11.03.2010 N 138 (ред. от 02.12.2020)](http://government.ru/docs/all/71838/) *Об утверждении Федеральных правил использования воздушного пространства Российской Федерации*"'\n'
           "Приказ Минтранса России от 27.06.2011 N 171 (ред. от 10.08.2017) Об утверждении Инструкции по разработке, установлению, введению и снятию временного и местного режимов, а также кратковременных ограничений",

    "Зоны полетов": "5. Изучайте зону полета и не летайте в запрещенных для полетов зонах."
}

# FAQ (Часто задаваемые вопросы)
faq_topics = [
    "Какие разрешения нужны для полетов?",
    "Максимальная высота полета дронов?",
    "Время полета дронов?",
    "Сложные погодные условия"
]

# Ответы на часто задаваемые вопросы
faq_answers = {
    "Какие разрешения нужны для полетов?": "1. Разрешения зависят от законодательства вашей страны и региона. Обычно требуется регистрация и соблюдение местных правил.",
    "Максимальная высота полета дронов?": "2. Максимальная высота полета дронов составляет 120 метров в большинстве стран.",
    "Время полета дронов?": "3. Среднее время полета дронов составляет 20-30 минут, в зависимости от модели.",
    "Сложные погодные условия": "4. В сложных погодных условиях следует использовать дроны с улучшенной стабилизацией и учитывать погодные ограничения."
}


def clear_screen_with_blank(chat_id):
    send_message(chat_id, " ")


# Функция для получения погоды с WeatherAPI
def get_weather(city_name, chat_id):
    try:
        # Формируем URL для WeatherAPI (текущая погода и прогноз на следующий день)
        weather_url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={city_name}&days=2&lang=ru"

        # Выполняем запрос к WeatherAPI
        response = requests.get(weather_url)

        # Проверяем успешность запроса
        if response.status_code != 200:
            return "Не удалось получить данные о погоде. Проверьте название города.", None

        weather_data = response.json()

        # Формируем информацию о погоде, начиная с заголовка
        weather_info = f"Погода в городе {city_name.capitalize()}:\n"

        # Проверяем и добавляем информацию о текущей погоде
        if 'current' in weather_data:
            current_temp = weather_data['current'].get('temp_c')
            current_condition = weather_data['current']['condition'].get('text') if 'condition' in weather_data['current'] else None
            current_wind_speed = weather_data['current'].get('wind_kph')
            current_wind_dir = weather_data['current'].get('wind_dir')

            if current_temp is not None:
                weather_info += f"Температура: {current_temp}°C.\n"
            if current_condition:
                weather_info += f"Состояние: {current_condition}.\n"
            if current_wind_speed is not None:
                weather_info += f"Скорость ветра: {current_wind_speed} км/ч.\n"
            if current_wind_dir:
                weather_info += f"Направление ветра: {current_wind_dir}.\n"

        # Проверяем и добавляем информацию о прогнозе на завтра
        if 'forecast' in weather_data and 'forecastday' in weather_data['forecast']:
            forecast_data = weather_data['forecast']['forecastday'][1]  # Прогноз на следующий день
            tomorrow_temp = forecast_data['day'].get('avgtemp_c')
            tomorrow_condition = forecast_data['day']['condition'].get('text') if 'condition' in forecast_data['day'] else None

            weather_info += "\nПрогноз на завтра:\n"
            if tomorrow_temp is not None:
                weather_info += f"Температура: {tomorrow_temp}°C.\n"
            if tomorrow_condition:
                weather_info += f"Состояние: {tomorrow_condition}.\n"

        # Если информация о погоде пустая, сообщаем об ошибке
        if weather_info.strip() == f"Погода в городе {city_name.capitalize()}:\n":
            return "Не удалось получить данные о погоде.", None

        # Создаем кнопку "В главное меню"
        buttons = [[{"text": "В главное меню", "callback_data": "main_menu"}]]
        keyboard = {"inline_keyboard": buttons}

        return weather_info.strip(), keyboard

    except Exception as e:
        # Возвращаем текст ошибки и пустую клавиатуру (None)
        return f"Произошла ошибка: {str(e)}", None



# Функция для получения обновлений от Telegram
def get_updates(offset=None):
    url = URL + "getUpdates"
    params = {"timeout": 100, "offset": offset}
    response = requests.get(url, params=params)
    return response.json()


# Функция для отправки сообщений
# Функция для отправки сообщения с кнопками
def send_message(chat_id, text, keyboard=None):
    url = URL + "sendMessage"
    params = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    if keyboard:
        params["reply_markup"] = keyboard  # Добавляем клавиатуру, если она есть
    requests.post(url, json=params)



# Функция для отправки сообщения с кнопками inline (варианты ответов)
def send_question(chat_id, question_data, question_index):
    url = URL + "sendMessage"

    # Создаем inline кнопки с вариантами ответов
    keyboard = {
        "inline_keyboard": [
            [{"text": answer, "callback_data": f"{question_index}:{i}"}]
            for i, answer in enumerate(question_data["answers"])
        ]
    }

    params = {
        "chat_id": chat_id,
        "text": question_data["question"],
        "reply_markup": keyboard
    }
    requests.post(url, json=params)


# Отправка меню Нормативной документации с кнопками
def send_documentation_menu(chat_id):
    buttons = [[{"text": rule, "callback_data": rule}] for rule in documentation_rules]
    url = URL + "sendMessage"
    keyboard = {"inline_keyboard": buttons}
    params = {"chat_id": chat_id, "text": "Выберите нормативные документы:", "reply_markup": keyboard}
    requests.post(url, json=params)


# Отправка меню FAQ с кнопками
def send_faq_menu(chat_id):
    buttons = [[{"text": faq, "callback_data": faq}] for faq in faq_topics]
    url = URL + "sendMessage"
    keyboard = {"inline_keyboard": buttons}
    params = {"chat_id": chat_id, "text": "Выберите часто задаваемый вопрос:", "reply_markup": keyboard}
    requests.post(url, json=params)


# Отправка тем подготовки к аэрофотосъемке с БАС с кнопками
def send_preparation_menu(chat_id):
    buttons = [[{"text": preparation, "callback_data": preparation}] for preparation in preparation_topics]
    url = URL + "sendMessage"
    keyboard = {"inline_keyboard": buttons}
    params = {"chat_id": chat_id, "text": "Выберите этап подготовки к аэрофотосъемке:", "reply_markup": keyboard}
    requests.post(url, json=params)



# Обработка выбора правил безопасности
def handle_documentation_rule(chat_id, rule):
    if rule in documentation_descriptions:
        # Создаем кнопки, в том числе "В главное меню"
        buttons = [[{"text": "В главное меню", "callback_data": "main_menu"}]]
        keyboard = {"inline_keyboard": buttons}

        # Параметры для отправки сообщения с описанием документа и кнопкой
        params = {
            "chat_id": chat_id,
            "text": documentation_descriptions[rule],
            "reply_markup": keyboard,
            "parse_mode": "Markdown"  # Добавлен параметр для Markdown
        }

        url = URL + "sendMessage"
        requests.post(url, json=params)



# Обработка выбора FAQ
def handle_faq(chat_id, faq):
    if faq in faq_answers:
        send_message(chat_id, faq_answers[faq])


# Обработка выбора этапов подготовки
def handle_preparation_topic(chat_id, topic):
    if topic in preparation_descriptions:
        send_message(chat_id, preparation_descriptions[topic])
# Создаем кнопки, в том числе "В главное меню"
        buttons = [[{"text": "В главное меню", "callback_data": "main_menu"}]]
        keyboard = {"inline_keyboard": buttons}

        # Параметры для отправки сообщения с описанием документа и кнопкой
        params = {
            "chat_id": chat_id,
            "text": preparation_descriptions[topic],
            "reply_markup": keyboard,
            "parse_mode": "Markdown"  # Добавлен параметр для Markdown
        }

        url = URL + "sendMessage"
        requests.post(url, json=params)

# Функция для отправки следующего вопроса или завершения теста
def handle_answer(chat_id, question_index, user_answer):
    correct_answer = questions[question_index]["correct"]

    if user_answer == correct_answer:
        send_message(chat_id, "Правильно!")
    else:
        send_message(chat_id, f"Неправильно! Правильный ответ: {questions[question_index]['answers'][correct_answer]}.")

    # Если есть следующий вопрос, отправляем его
    if question_index + 1 < len(questions):
        send_question(chat_id, questions[question_index + 1], question_index + 1)
    else:
        send_message(chat_id, "Тест завершен. Спасибо за участие!")


# Обработка inline callback'ов (ответов на тест, этапов подготовки, нормативная документация и FAQ)
def handle_callback(update):
    query = update["callback_query"]
    chat_id = query["message"]["chat"]["id"]
    data = query["data"]  # Пример данных: "Планирование маршрута" или "0:1"

    # Проверяем, это ответ на тест или выбор темы подготовки/правил/FAQ
    if ":" in data:
        question_index, user_answer = map(int, data.split(":"))
        handle_answer(chat_id, question_index, user_answer)
    elif data in preparation_descriptions:
        handle_preparation_topic(chat_id, data)
    elif data in documentation_descriptions:
        handle_documentation_rule(chat_id, data)
    elif data in faq_answers:
        handle_faq(chat_id, data)
    elif data == "main_menu":
        send_main_menu(chat_id)  # Возвращаемся в главное меню



## Основные команды с обработкой команды "Погода"
# Функция для обработки текстовых сообщений
def handle_updates(updates):
    for update in updates["result"]:
        if "message" in update:  # Если это текстовое сообщение
            chat_id = update["message"]["chat"]["id"]
            message_text = update["message"]["text"]

            # Проверяем состояние пользователя
            if chat_id in user_states and user_states[chat_id] == "awaiting_city":
                # Если бот ожидает название города
                weather_info, keyboard = get_weather(message_text, chat_id)
                send_message(chat_id, weather_info, keyboard)
                user_states[chat_id] = None  # Сбрасываем состояние после обработки

            else:
                # Обработка других команд
                if message_text == "/start":
                    send_message(chat_id, "Добро пожаловать! Я помогу вам научиться выполнять аэрофотосъемку с БАС.")
                    send_main_menu(chat_id)
                elif message_text == "Этапы подготовки к съемке":
                    send_preparation_menu(chat_id)
                elif message_text == "Нормативная документация":
                    send_documentation_menu(chat_id)
                elif message_text == "FAQ":
                    send_faq_menu(chat_id)
                elif message_text == "Тестирование":
                    send_question(chat_id, questions[0], 0)
                elif message_text == "Погода":
                    send_message(chat_id, "Пожалуйста, напишите название города, чтобы получить прогноз погоды.")
                    user_states[chat_id] = "awaiting_city"  # Устанавливаем состояние ожидания города
                else:
                    send_message(chat_id, "Я не понимаю, что вы хотите. Выберите опцию из меню или напишите /start.")

        if "callback_query" in update:  # Если это inline кнопка (callback)
            handle_callback(update)




# Главное меню
def send_main_menu(chat_id):
    buttons = [
        ["Нормативная документация"],
        ["Этапы подготовки к съемке"],
        ["FAQ"],
        ["Тестирование"],
        ["Погода"],
    ]
    send_buttons(chat_id, "Выберите интересующий вас раздел:", buttons)

# Функция для отправки сообщения с кнопками
def send_buttons(chat_id, text, buttons):
    url = URL + "sendMessage"
    keyboard = {"keyboard": buttons, "resize_keyboard": True, "one_time_keyboard": True}
    params = {"chat_id": chat_id, "text": text, "reply_markup": keyboard}
    requests.post(url, json=params)


# Основная логика
def main():
    offset = None
    while True:
        updates = get_updates(offset)
        if "result" in updates and len(updates["result"]) > 0:
            handle_updates(updates)
            offset = updates["result"][-1]["update_id"] + 1
        time.sleep(1)

if __name__ == "__main__":
    main()
